var v1 int
var v2 string
var v3 [10]int // 数组
var v4 []int // 数组切片
var v5 struct {
f int
}
var v6 *int // 指针
var v7 map[string]int // map， key为string类型， value为int类型
var v8 func(a int) int


var关键字的另一种用法是可以将若干个需要声明的变量放置在一起：
var (
v1 int
v2 string
)

2. 变量初始化
对于声明变量时需要进行初始化的场景， var关键字可以保留，但不再是必要的元素
var v1 int = 10 // 正确的使用方式1
var v2 = 10 // 正确的使用方式2，编译器可以自动推导出v2的类型
v3 := 10 // 正确的使用方式3，编译器可以自动推导出v3的类型
符号（:=）：用于明确表达同时进行变量声明和初始化的工作。
出现在:=左侧的变量不应该是已经被声明过的，否则会导致编译错误，如：
var i int
i := 2
会导致类似如下的编译错误：
no new variables on left side of :=

3. 变量赋值
变量初始化和变量赋值是两个不同的概念。下面为声明一个变量之后的赋值
过程：
var v10 int
v10 = 123

Go语言中提供了C/C++程序员期盼多年的多重赋值功
能，比如下面这个交换i和j变量的语句：
i, j = j, i
在不支持多重赋值的语言中，交互两个变量的内容需要引入一个中间变量：
t = i; i = j; j = t;

4 匿名变量
传统的强类型语言编程时，在调用函数时为了获取一个
值，却因为该函数返回多个值而不得不定义一堆没用的变量。在Go中这种情况可以通过结合使
用多重返回和匿名变量来避免这种写法。
假设GetName()函数的定义如下，它返回3个值，分别为firstName、lastName和nickName：
func GetName() (firstName, lastName, nickName string) {
return "May", "Chan", "Chibi Maruko"
}
若只想获得nickName，则函数调用语句可以用如下方式编写：
_, _, nickName := GetName()
这种用法可以让代码非常清晰，基本上屏蔽掉了可能混淆代码阅读者视线的内容，从而大幅
降低沟通的复杂度和代码维护的难度